# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-docker-builder.yml
# Description: Build OpenWrt using GitHub Actions with Docker
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Docker Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DOCKER_IMAGE: openwrt-builder

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Prepare build context
      run: |
        # 创建构建上下文目录
        mkdir -p docker-context
        
        # 复制必需的脚本文件
        cp $DIY_P1_SH docker-context/ 2>/dev/null || echo "#!/bin/bash" > docker-context/$DIY_P1_SH
        cp $DIY_P2_SH docker-context/ 2>/dev/null || echo "#!/bin/bash" > docker-context/$DIY_P2_SH
        
        # 复制可选的配置文件（如果不存在则创建空文件）
        cp $FEEDS_CONF docker-context/ 2>/dev/null || touch docker-context/$FEEDS_CONF
        cp $CONFIG_FILE docker-context/ 2>/dev/null || touch docker-context/$CONFIG_FILE
        
        # 复制files目录（如果不存在则创建空目录）
        if [ -d files ]; then
          cp -r files docker-context/
        else
          mkdir -p docker-context/files
        fi

    - name: Create base Dockerfile
      run: |
        cat > docker-context/Dockerfile <<EOF
        FROM ubuntu:22.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Asia/Shanghai
        
        # 安装编译依赖
        RUN rm -rf /etc/apt/sources.list.d/* && \
            apt-get -qq update && \
            apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev && \
            apt-get -qq autoremove --purge && \
            apt-get -qq clean
        
        # 创建工作目录
        RUN mkdir -p /workdir
        WORKDIR /workdir
        
        # 复制文件
        COPY $DIY_P1_SH /workdir/
        COPY $DIY_P2_SH /workdir/
        COPY $FEEDS_CONF /workdir/
        COPY $CONFIG_FILE /workdir/
        COPY files /workdir/files/
        
        CMD ["/bin/bash"]
        EOF

    - name: Build base Docker image
      run: |
        docker build -t base-builder docker-context/

    - name: Prepare OpenWrt source in Docker
      run: |
        docker run --name openwrt-prep base-builder /bin/bash -c "
          cd /workdir &&
          git clone $REPO_URL -b $REPO_BRANCH --depth=1 openwrt &&
          cd openwrt &&
          [ -e /workdir/$FEEDS_CONF ] && mv /workdir/$FEEDS_CONF feeds.conf.default &&
          chmod +x /workdir/$DIY_P1_SH &&
          /workdir/$DIY_P1_SH &&
          ./scripts/feeds update -a &&
          ./scripts/feeds install -a &&
          [ -e /workdir/files ] && mv /workdir/files files &&
          [ -e /workdir/$CONFIG_FILE ] && mv /workdir/$CONFIG_FILE .config &&
          chmod +x /workdir/$DIY_P2_SH &&
          /workdir/$DIY_P2_SH &&
          make defconfig &&
          make download -j8 &&
          find dl -size -1024c -exec ls -l {} \; &&
          find dl -size -1024c -exec rm -f {} \;
        "

    - name: Commit Docker container to image
      run: |
        docker commit openwrt-prep ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
        docker rm openwrt-prep

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image to Docker Hub
      run: |
        echo "推送Docker镜像到Docker Hub..."
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
        echo "Docker镜像推送完成！"

    - name: Compile the firmware in Docker
      id: compile
      run: |
        echo "开始在Docker容器中编译固件..."
        docker run --name openwrt-compile ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest /bin/bash -c "
          cd /workdir/openwrt &&
          echo -e \"$(nproc) thread compile\" &&
          make -j8
        "
        
        # 从容器中复制编译结果和配置文件
        mkdir -p openwrt
        docker cp openwrt-compile:/workdir/openwrt/bin ./openwrt/
        docker cp openwrt-compile:/workdir/openwrt/.config ./openwrt/
        
        # 保存完整的配置文件
        mkdir -p configs
        docker cp openwrt-compile:/workdir/openwrt/.config ./configs/openwrt.config
        
        # 尝试复制内核配置文件（如果存在）
        docker exec openwrt-compile find /workdir/openwrt -name ".config" -path "*/build_dir/target-*/linux-*/linux-*" -exec cp {} /tmp/kernel.config \; 2>/dev/null || true
        docker cp openwrt-compile:/tmp/kernel.config ./configs/kernel.config 2>/dev/null || echo "内核配置文件未找到"
        
        # 复制feeds配置
        docker cp openwrt-compile:/workdir/openwrt/feeds.conf.default ./configs/feeds.conf.default 2>/dev/null || true
        
        cd openwrt
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        docker rm openwrt-compile

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload configuration files
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_configs${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: configs/

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "🐳 Docker镜像: \`docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.run_number }}\`" >> release.txt
        echo "" >> release.txt
        echo "📋 配置文件说明:" >> release.txt
        echo "- openwrt.config: OpenWrt主配置文件" >> release.txt
        echo "- kernel.config: 内核配置文件（如果可用）" >> release.txt
        echo "- feeds.conf.default: Feeds配置文件" >> release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Prepare release files
      if: steps.tag.outputs.status == 'success' && !cancelled()
      run: |
        mkdir -p release_files
        cp -r ${{ env.FIRMWARE }}/* release_files/ 2>/dev/null || true
        cp -r configs/* release_files/ 2>/dev/null || true

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: release_files/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
